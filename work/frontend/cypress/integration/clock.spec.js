/**
 * STRING_COMPETITION STRING_YEAR - STRING_TRADE - STRING_TITLE
 * Frontend - Task 1
 *
 * This file contains the unit tests performed on the frontend task.
 * You may look at the test cases but not modify them.
 *
 * !!! DO NOT EDIT THIS FILE !!!
 */

const Clock = require('../../src/clock.js')

describe('Clock', () => {
    beforeEach(() => {
        cy.visit('/cypress/fixtures/clock.html')
        cy.wait(500)
    })

    afterEach(() => {
        cy.wait(500)
    })

    it('can instantiate a clock', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            expect(clock.getElement()).to.equal(el)
            expect(clock.getMillis()).to.equal(0)

            const millis = (12 * 60 * 1000) + (34 * 1000)
            const clock2 = new Clock(el, millis)

            expect(clock2.getElement()).to.equal(el)
            expect(clock2.getMillis()).to.equal(millis)
        })
    })

    it('can set a clock\'s milliseconds after instantiating', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            expect(clock.getMillis()).to.equal(0)

            const millis = (12 * 60 * 1000) + (34 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
        })
    })

    it('can add milliseconds to a clock', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            expect(clock.getMillis()).to.equal(0)

            clock.addMillis(1500)
            expect(clock.getMillis()).to.equal(1500)

            clock.addMillis(200)
            expect(clock.getMillis()).to.equal(1700)
        })
    })

    it('can subtract milliseconds from a clock', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el, 10000)

            expect(clock.getMillis()).to.equal(10000)

            clock.addMillis(-2500)
            expect(clock.getMillis()).to.equal(7500)

            clock.addMillis(-2000)
            expect(clock.getMillis()).to.equal(5500)
        })
    })

    it('throws an error when a negative number of milliseconds is set', () => {
        cy.get('#clock').then(([el]) => {
            expect(() => {
                const clock = new Clock(el)
                clock.setMillis(-7)
            }).to.throw()

            expect(() => {
                const clock = new Clock(el)
                clock.addMillis(-100)
            }).to.throw()

            expect(() => {
                new Clock(el, -22)
            }).to.throw()
        })
    })

    it('can set each digit of a clock initially', () => {
        cy.get('#clock').then(([el]) => {
            const millis = (56 * 60 * 1000) + (2 * 1000)
            const clock = new Clock(el, millis)

            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getDigit('minutes', 10).getValue()).to.equal(5)
            expect(clock.getDigit('minutes', 1).getValue()).to.equal(6)
            expect(clock.getDigit('seconds', 10).getValue()).to.equal(0)
            expect(clock.getDigit('seconds', 1).getValue()).to.equal(2)
        })
    })

    it('can calculate seconds from milliseconds', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            let millis = (57 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getSeconds()).to.equal(57)

            millis = (12 * 60 * 1000) + (23 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getSeconds()).to.equal(12 * 60 + 23)

            millis = (54 * 60 * 1000) + (11 * 1000) + 100
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getSeconds()).to.equal(54 * 60 + 12)

            millis = 0
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getSeconds()).to.equal(0)
        })
    })

    it('can calculate modulo seconds from milliseconds', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            let millis = (34 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getModuloSeconds()).to.equal(34)

            millis = (12 * 60 * 1000) + (52 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getModuloSeconds()).to.equal(52)

            millis = (12 * 60 * 1000) + (41 * 1000) + 100
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getModuloSeconds()).to.equal(42)
        })
    })

    it('can calculate floored minutes from milliseconds', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            let millis = (34 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getFlooredMinutes()).to.equal(0)

            millis = (12 * 60 * 1000) + (52 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getFlooredMinutes()).to.equal(12)

            millis = (31 * 60 * 1000)
            clock.setMillis(millis)
            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getFlooredMinutes()).to.equal(31)
        })
    })

    it('can set each digit of a clock according to the total number of milliseconds', () => {
        cy.get('#clock').then(([el]) => {
            const clock = new Clock(el)

            const millis = (12 * 60 * 1000) + (34 * 1000)
            clock.setMillis(millis)

            expect(clock.getMillis()).to.equal(millis)
            expect(clock.getDigit('minutes', 10).getValue()).to.equal(1)
            expect(clock.getDigit('minutes', 1).getValue()).to.equal(2)
            expect(clock.getDigit('seconds', 10).getValue()).to.equal(3)
            expect(clock.getDigit('seconds', 1).getValue()).to.equal(4)
        })
    })
})
